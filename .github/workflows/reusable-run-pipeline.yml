name: run-pipeline

on:
  workflow_call:
    inputs:
      parameters-file:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      workspace_name:
        required: true
        type: string
      job-name:
        required: true
        type: string
      environment:
        required: true
        default: "dev"
        type: string

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: install-extension
        run: az extension add -n ml -y
      - name: update-extension
        run: az extension update -n ml
      - name: run-ml-pipeline
        run: |
          run_id=$(az ml job create --file "${{ github.workspace }}/${{ inputs.parameters-file }}" \
            --resource-group "${{ inputs.resource_group }}" \
            --workspace-name "${{ inputs.workspace_name }}" \
            --set inputs.RESOURCE_GROUP="${{ inputs.resource_group }}" \
                  inputs.WORKSPACE_NAME="${{ inputs.workspace_name }}" \
                  inputs.SUB_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
                  inputs.CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}" \
                  inputs.REGISTRY_NAME="${{ secrets.REGISTRY_NAME }}" \
                  inputs.TENANT_ID="${{ secrets.AZURE_TENANT_ID }}" \
                  inputs.CLIENT_SECRET="${{ secrets.AZURE_CLIENT_SECRET }}" \
            --query name -o tsv)
          
          if [[ -z "$run_id" ]]
          then
            echo "Job creation failed"
            exit 3
          fi
          az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --web 
          status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
          if [[ -z "$status" ]]
          then
            echo "Status query failed"
            exit 4
          fi
          running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
          while [[ ${running[*]} =~ $status ]]
          do
            sleep 15 
            status=$(az ml job show -n $run_id --resource-group ${{ inputs.resource_group }} --workspace-name ${{ inputs.workspace_name }} --query status -o tsv)
            echo $status
          done
          if [[ "$status" != "Completed" ]]  
          then
            echo "Training Job failed or canceled"
            exit 3
          fi
